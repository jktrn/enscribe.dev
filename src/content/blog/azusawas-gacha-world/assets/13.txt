using System.Collections.Generic;
using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using RequestClasses;
using UnityEngine.EventSystems;

public class UIManager : MonoBehaviour
{
    [Header("Main Gacha")]
    public TextMeshProUGUI crystalText;
    public Button onePullButton;
    public Button tenPullButton;
    public Button characterDetailsButton;
    public Button gachaDetailsButton;
    public Button addCrystalsButton;
    public Button menuButton;

    [Header("Info Modals")]
    public GameObject dimmedBackground;
    public GameObject gachaDetailsModal;
    public Button gachaDetailsModalCloseButton;
    public GameObject characterDetailsModal;
    public Button characterDetailsModalCloseButton;
    public GameObject failedConnectionModal;
    public Button failedConnectionModalCloseButton;
    public GameObject tryHarderModal;
    public Button tryHarderModalCloseButton;
    public GameObject pullConfirmationModal;
    public TextMeshProUGUI pullConfirmationText;
    public TextMeshProUGUI requiredCrystalsText;
    public TextMeshProUGUI currentCrystalsText;
    public Button pullConfirmationContinueButton;
    public Button pullConfirmationCloseButton;
    public GameObject menuModal;
    public Button menuModalCloseButton;
    public Slider musicSlider;
    public TextMeshProUGUI musicSliderValue;
    public Slider sfxSlider;
    public TextMeshProUGUI sfxSliderValue;
    public Button exitGameButton;

    [Header("Splash Art")]
    public Canvas splashArtCanvas;
    public TextMeshProUGUI cardNameText;
    public Image splashArtBackground;
    public Image backgroundTint;
    public Image splashArtImage;
    public Image splashArtImageMask;
    public Image threeStarSplash;
    public Image silhouetteImage;
    public Image namecardMask;
    public Image flagImage;
    public GameObject stars;
    public RawImage movingTriangles;
    public Button skipButton;

    [Header("Gacha Overview")]
    public Canvas gachaOverviewCanvas;
    public GridLayoutGroup gridLayoutGroup;
    public GameObject avatarPrefab;
    public Button nextButton;
    public Button returnButton;
    public Button pullAgainButton;

    private GameState gameState;
    private GachaManager gachaManager;
    private List<GameObject> avatarObjects = new List<GameObject>();
    private bool skipClicked = false;
    private bool isAnimating = false;
    private float oldMusicVolume;
    private float oldSFXVolume;
    private float timeSinceLastSFX = 0f;
    private float sfxCooldown = 0.05f;

    void Start()
    {
        gameState = FindObjectOfType<GameState>();
        gachaManager = FindObjectOfType<GachaManager>();
        UpdateUI();

        onePullButton.onClick.AddListener(() => OnPullButtonClick(100, 1));
        tenPullButton.onClick.AddListener(() => OnPullButtonClick(1000, 10));
        skipButton.onClick.AddListener(OnSkipButtonClick);
        nextButton.onClick.AddListener(OnNextButtonClick);
        returnButton.onClick.AddListener(OnNextButtonClick);
        pullAgainButton.onClick.AddListener(OnPullAgainButtonClick);
        gachaDetailsButton.onClick.AddListener(OnGachaDetailsButtonClick);
        addCrystalsButton.onClick.AddListener(() =>
        {
            GenericModalHandler(tryHarderModal, tryHarderModalCloseButton);
        });
        characterDetailsButton.onClick.AddListener(() =>
        {
            GenericModalHandler(characterDetailsModal, characterDetailsModalCloseButton);
        });
        menuButton.onClick.AddListener(() =>
        {
            GenericModalHandler(menuModal, menuModalCloseButton);
        });
    }

    public void UpdateUI()
    {
        crystalText.text = gameState.crystals.ToString();
    }

    public void MusicVolume()
    {
        if (Time.time - timeSinceLastSFX >= sfxCooldown)
        {
            if (musicSlider.value > oldMusicVolume)
            {
                AudioController.Instance.PlaySFX("Up");
                timeSinceLastSFX = Time.time;
            }
            else if (musicSlider.value < oldMusicVolume)
            {
                AudioController.Instance.PlaySFX("Down");
                timeSinceLastSFX = Time.time;
            }
        }
        AudioController.Instance.MusicVolume(musicSlider.value);
        musicSliderValue.text = musicSlider.value.ToString();
        oldMusicVolume = musicSlider.value;
    }

    public void SFXVolume()
    {
        if (Time.time - timeSinceLastSFX >= sfxCooldown)
        {
            if (sfxSlider.value > oldSFXVolume)
            {
                AudioController.Instance.PlaySFX("Up");
                timeSinceLastSFX = Time.time;
            }
            else if (sfxSlider.value < oldSFXVolume)
            {
                AudioController.Instance.PlaySFX("Down");
                timeSinceLastSFX = Time.time;
            }
        }
        AudioController.Instance.SFXVolume(sfxSlider.value);
        sfxSliderValue.text = sfxSlider.value.ToString();
        oldSFXVolume = sfxSlider.value;
    }

    public void ExitGame()
    {
        Application.Quit();
    }

    public void OnPullButtonClick(int cost, int numPulls)
    {
        dimmedBackground.SetActive(true);
        Animation pullConfirmationModalAnimation = pullConfirmationModal.GetComponent<Animation>();

        pullConfirmationText.text =
            $"クリスタル<color=#FF679A>{cost.ToString()}個</color>を消費して<color=#FF679A>{numPulls.ToString()}回</color>\n「[小豆沢こはね] HAPPY BIRTHDAY2023ガチャ」を引\nきます。\nよろしいですか?";

        requiredCrystalsText.text = cost.ToString();
        currentCrystalsText.text = gameState.crystals.ToString();
        pullConfirmationContinueButton.GetComponent<ShrinkButton>().enabled = true;
        pullConfirmationContinueButton.interactable = true;

        if (gameState.crystals < cost)
        {
            pullConfirmationContinueButton.GetComponent<ShrinkButton>().enabled = false;
            pullConfirmationContinueButton.interactable = false;
            currentCrystalsText.text = $"<color=#FF679A>{gameState.crystals.ToString()}</color>";
        }

        pullConfirmationModal.SetActive(true);
        pullConfirmationModalAnimation.Play("ZoomIn");

        pullConfirmationContinueButton.onClick.RemoveAllListeners();
        pullConfirmationCloseButton.onClick.RemoveAllListeners();

        pullConfirmationContinueButton.onClick.AddListener(() =>
        {
            dimmedBackground.SetActive(false);
            pullConfirmationModal.SetActive(false);
            StartCoroutine(gachaManager.SendGachaRequest(numPulls));
        });

        pullConfirmationCloseButton.onClick.AddListener(() =>
        {
            dimmedBackground.SetActive(false);
            pullConfirmationModalAnimation.Play("ZoomOut");
            StartCoroutine(SetInactiveAfterDelay(pullConfirmationModal, 0.1f));
        });
    }

    public void GenericModalHandler(GameObject modal, Button closeButton)
    {
        dimmedBackground.SetActive(true);
        Animation modalAnimation = modal.GetComponent<Animation>();

        modal.SetActive(true);
        modalAnimation.Play("ZoomIn");
        closeButton.onClick.RemoveAllListeners();
        closeButton.onClick.AddListener(() =>
        {
            dimmedBackground.SetActive(false);
            modalAnimation.Play("ZoomOut");
            StartCoroutine(SetInactiveAfterDelay(modal, 0.1f));
        });
    }

    public IEnumerator DisplaySplashArt(Character[] characters)
    {
        for (int i = 0; i < characters.Length; i++)
        {
            if (skipClicked)
            {
                skipClicked = false;
                break;
            }

            if (characters[i].rarity == "4*")
            {
                StartCoroutine(DisplayFourStarCharacter(characters[i]));
            }
            else if (characters[i].rarity == "3*")
            {
                StartCoroutine(DisplayThreeStarCharacter(characters[i]));
            }
            else
            {
                StartCoroutine(DisplayTwoStarCharacter(characters[i]));
            }

            yield return new WaitForEndOfFrame();
            yield return new WaitUntil(() => CheckForSkipOrClick(characters, i));

            if (!skipClicked)
            {
                AudioController.Instance.PlaySFX("Touch");
            }
        }

        DisplayGachaOverview();
    }

    private IEnumerator DisplayTwoStarCharacter(Character character)
    {
        ResetAnimations();
        cardNameText.text = character.cardName;
        UpdateSplashArtImage(character.splashArt, splashArtImage);
        UpdateSilhouetteImage(character.splashArt);

        Animation silhouetteImageAnimation = silhouetteImage.GetComponent<Animation>();
        Animation splashArtBackgroundAnimation = splashArtBackground.GetComponent<Animation>();
        Animation backgroundTintAnimation = backgroundTint.GetComponent<Animation>();
        Animation splashArtImageMaskAnimation = splashArtImageMask.GetComponent<Animation>();
        Animation movingTrianglesAnimation = movingTriangles.GetComponent<Animation>();
        Animation starsAnimation = stars.GetComponent<Animation>();
        Animation namecardMaskAnimation = namecardMask.GetComponent<Animation>();

        isAnimating = true;
        silhouetteImageAnimation.Play();
        splashArtBackgroundAnimation.Play();

        yield return new WaitForSeconds(1f);

        movingTrianglesAnimation.Play();
        splashArtImageMaskAnimation.Play();
        starsAnimation.Play("TwoStarRarity");
        AudioController.Instance.PlaySFX("TwoStar");

        yield return new WaitForSeconds(0.5f);

        namecardMaskAnimation.Play();

        yield return new WaitForSeconds(1f);

        backgroundTintAnimation.Play();

        yield return new WaitUntil(
            () =>
                !splashArtBackgroundAnimation.isPlaying
                && !backgroundTintAnimation.isPlaying
        );

        isAnimating = false;
    }

    private IEnumerator DisplayThreeStarCharacter(Character character)
    {
        ResetAnimations();
        cardNameText.text = character.cardName;
        UpdateSplashArtImage(character.splashArt, threeStarSplash);
        threeStarSplash.gameObject.SetActive(true);

        Animation threeStarSplashAnimation = threeStarSplash.GetComponent<Animation>();
        Animation starsAnimation = stars.GetComponent<Animation>();
        Animation namecardMaskAnimation = namecardMask.GetComponent<Animation>();

        isAnimating = true;
        threeStarSplashAnimation.Play();

        yield return new WaitForSeconds(1f);

        starsAnimation.Play("ThreeStarRarity");
        AudioController.Instance.PlaySFX("ThreeStar");

        yield return new WaitForSeconds(1f);

        namecardMaskAnimation.Play();

        yield return new WaitUntil(() => !threeStarSplashAnimation.isPlaying);

        isAnimating = false;
        yield break;
    }

    private IEnumerator DisplayFourStarCharacter(Character character)
    {
        ResetAnimations();
        cardNameText.text = character.cardName;
        UpdateSplashArtImage(character.splashArt, threeStarSplash);
        threeStarSplash.gameObject.SetActive(true);

        Animation threeStarSplashAnimation = threeStarSplash.GetComponent<Animation>();
        Animation starsAnimation = stars.GetComponent<Animation>();
        Animation namecardMaskAnimation = namecardMask.GetComponent<Animation>();

        string flag = character.flag;

        if (flag != null)
        {
            byte[] imageBytes = System.Convert.FromBase64String(flag);
            Texture2D flagTexture = new Texture2D(2, 2);
            flagTexture.LoadImage(imageBytes);

            Rect rect = new Rect(0, 0, flagTexture.width, flagTexture.height);
            Vector2 pivot = new Vector2(0.5f, 0.5f);
            Sprite flagSprite = Sprite.Create(flagTexture, rect, pivot);

            flagImage.sprite = flagSprite;
        }

        isAnimating = true;
        threeStarSplashAnimation.Play();

        yield return new WaitForSeconds(1f);

        AudioController.Instance.PlaySFX("FourStar");
        starsAnimation.Play("FourStarRarity");

        flagImage.gameObject.SetActive(true);
        namecardMaskAnimation.Play();

        yield return new WaitUntil(() => !threeStarSplashAnimation.isPlaying);

        isAnimating = false;
        yield break;
    }

    private IEnumerator SetInactiveAfterDelay(GameObject gameObject, float delay)
    {
        yield return new WaitForSeconds(delay);
        gameObject.gameObject.SetActive(false);
    }

    private void UpdateSplashArtImage(string splashArt, Image image)
    {
        string imagePath = "Gacha/" + splashArt;
        Texture2D texture = Resources.Load<Texture2D>(imagePath);
        image.sprite = Sprite.Create(
            texture,
            new Rect(0, 0, texture.width, texture.height),
            new Vector2(0.5f, 0.5f)
        );
    }

    private void UpdateSilhouetteImage(string splashArt)
    {
        string imagePath = "Gacha/" + splashArt;
        Texture2D texture = Resources.Load<Texture2D>(imagePath);

        Texture2D silhouetteTexture = new Texture2D(texture.width, texture.height);
        Color[] pixels = texture.GetPixels();
        for (int i = 0; i < pixels.Length; i++)
        {
            if (pixels[i].a > 0)
            {
                pixels[i] = new Color(1, 103 / 255f, 154 / 255f, pixels[i].a);
            }
        }
        silhouetteTexture.SetPixels(pixels);
        silhouetteTexture.Apply();
        silhouetteImage.sprite = Sprite.Create(
            silhouetteTexture,
            new Rect(0, 0, texture.width, texture.height),
            new Vector2(0.5f, 0.5f)
        );
    }

    private void DisplayAvatars(Character[] characters)
    {
        foreach (GameObject avatarObject in avatarObjects)
        {
            Destroy(avatarObject);
        }

        avatarObjects.Clear();

        foreach (Character character in characters)
        {
            GameObject avatarObject = Instantiate(avatarPrefab, gridLayoutGroup.transform);
            avatarObjects.Add(avatarObject);

            Image avatarImage = avatarObject.GetComponent<Image>();
            string imagePath = "Gacha/" + character.avatar;
            Texture2D texture = Resources.Load<Texture2D>(imagePath);
            avatarImage.sprite = Sprite.Create(
                texture,
                new Rect(0, 0, texture.width, texture.height),
                new Vector2(0.5f, 0.5f)
            );
        }
    }

    private void SetImageOpacity(MaskableGraphic image, float targetOpacity)
    {
        Color imageColor = image.color;
        imageColor.a = targetOpacity;
        image.color = imageColor;
    }

    private void DisplayGachaOverview()
    {
        if (gameState.crystals < 1000)
        {
            pullAgainButton.GetComponent<ShrinkButton>().enabled = false;
            pullAgainButton.interactable = false;
        }
        else
        {
            pullAgainButton.GetComponent<ShrinkButton>().enabled = true;
            pullAgainButton.interactable = true;
        }
        splashArtCanvas.gameObject.SetActive(false);
        AudioController.Instance.FadeMusic("Gacha");
        DisplayAvatars(gachaManager.lastGachaResponse.characters);
        AudioController.Instance.PlaySFX("Award");
        gachaOverviewCanvas.gameObject.SetActive(true);
    }

    private void OnSkipButtonClick()
    {
        skipClicked = true;
        StopAllCoroutines();
        ResetAnimations();
        DisplayGachaOverview();
    }

    private void OnNextButtonClick()
    {
        gachaOverviewCanvas.gameObject.SetActive(false);
    }

    private void OnPullAgainButtonClick()
    {
        StartCoroutine(gachaManager.SendGachaRequest(10));
        StartCoroutine(SetInactiveAfterDelay(gachaOverviewCanvas.gameObject, 0.5f));
    }

    private void OnGachaDetailsButtonClick()
    {
        dimmedBackground.SetActive(true);
        Animation gachaDetailsModalAnimation = gachaDetailsModal.GetComponent<Animation>();

        ScrollRect scrollRect = gachaDetailsModal.transform
            .Find("GachaDetailsContent")
            .GetComponent<ScrollRect>();

        gachaDetailsModal.SetActive(true);
        gachaDetailsModalAnimation.Play("ZoomIn");
        scrollRect.verticalNormalizedPosition = 1.05f;
        gachaDetailsModalCloseButton.onClick.RemoveAllListeners();
        gachaDetailsModalCloseButton.onClick.AddListener(() =>
        {
            dimmedBackground.SetActive(false);
            gachaDetailsModalAnimation.Play("ZoomOut");
            StartCoroutine(SetInactiveAfterDelay(gachaDetailsModal, 0.1f));
        });
    }

    private void ResetAnimations()
    {
        Animation silhouetteImageAnimation = silhouetteImage.GetComponent<Animation>();
        Animation starsAnimation = stars.GetComponent<Animation>();
        silhouetteImageAnimation.Stop();
        starsAnimation.Stop();

        RectTransform splashArtImageMaskRectTransform =
            splashArtImageMask.GetComponent<RectTransform>();
        splashArtImageMaskRectTransform.sizeDelta = new Vector2(
            splashArtImageMaskRectTransform.sizeDelta.x,
            0.0f
        );

        RectTransform namecardMaskRectTransform = namecardMask.GetComponent<RectTransform>();
        namecardMaskRectTransform.sizeDelta = new Vector2(
            namecardMaskRectTransform.sizeDelta.x,
            0.0f
        );

        SetImageOpacity(silhouetteImage.GetComponent<Image>(), 0f);
        SetImageOpacity(backgroundTint.GetComponent<Image>(), 0f);
        SetImageOpacity(movingTriangles.GetComponent<RawImage>(), 0f);

        foreach (Transform child in stars.transform)
        {
            Image childImage = child.GetComponent<Image>();
            SetImageOpacity(childImage, 0f);
        }

        flagImage.gameObject.SetActive(false);
    }

    private bool CheckForSkipOrClick(Character[] characters, int index)
    {
        if (skipClicked)
        {
            threeStarSplash.gameObject.SetActive(false);
            return true;
        }
        if (Input.GetMouseButtonDown(0))
        {
            if (
                !isAnimating
                && EventSystem.current.currentSelectedGameObject != skipButton.gameObject
            )
            {
                if (characters[index].rarity == "3*" || characters[index].rarity == "4*")
                {
                    threeStarSplash.gameObject.SetActive(false);
                }

                return true;
            }
        }
        return false;
    }
}