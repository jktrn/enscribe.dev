---
import Badge from '@/components/Badge.astro'
import Link from '@/components/Link.astro'
import AvatarComponent from '@/components/ui/avatar'
import { Badge as BadgeComponent } from '@/components/ui/badge'
import { Icon } from 'astro-icon/components'

interface Solver {
  avatar?: string
  href?: string
  name: string
}

interface ChallengeProps {
  title?: string
  solvers?: Solver[]
  authors?: string[]
  points?: number
  category?: string | string[]
  solves?: number
  files?: string[]
  remote?: string
  flag?: string
}

const {
  title,
  solvers = [],
  authors = [],
  points,
  category,
  solves,
  files = [],
  remote,
  flag,
} = Astro.props as ChallengeProps

const categories = Array.isArray(category)
  ? category
  : category
    ? [category]
    : []
---

<div class="mx-auto flex flex-col gap-y-4 border p-4">
  {
    title && (
      <span class="not-prose text-foreground text-xl font-medium">{title}</span>
    )
  }
  <dl class="not-prose flex flex-col divide-y">
    {
      solvers.length > 0 && (
        <div class="flex flex-wrap items-center gap-x-4 py-2 first:pt-0 last:pb-0">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:users" class="size-4" />
            {solvers.length > 1 ? 'Solvers' : 'Solver'}
          </dt>
          <dd class="flex flex-1 flex-wrap gap-y-2">
            {solvers.map((solver, index) => (
              <div class="flex items-center">
                {solver.href ? (
                  <Link
                    href={solver.href}
                    class="flex items-center gap-x-1"
                    underline
                  >
                    <AvatarComponent
                      client:load
                      src={solver.avatar || '/static/logo.webp'}
                      alt={`${solver.name}'s avatar`}
                      fallback={solver.name[0]}
                      className="size-4 rounded-full"
                    />
                    <span class="text-foreground text-xs">{solver.name}</span>
                  </Link>
                ) : (
                  <div class="flex items-center gap-x-1">
                    <AvatarComponent
                      client:load
                      src={solver.avatar || '/static/logo.webp'}
                      alt={`${solver.name}'s avatar`}
                      fallback={solver.name[0]}
                      className="size-4 rounded-full"
                    />
                    <span class="text-foreground text-xs">{solver.name}</span>
                  </div>
                )}
                {index < solvers.length - 1 && (
                  <span class="mr-1 text-xs">,</span>
                )}
              </div>
            ))}
          </dd>
        </div>
      )
    }
    {
      authors.length > 0 && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:pen-tool" class="size-4" />
            {authors.length > 1 ? 'Authors' : 'Author'}
          </dt>
          <dd class="flex-1 text-xs">{authors.join(', ')}</dd>
        </div>
      )
    }
    {
      categories.length > 0 && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:tag" class="size-4" />
            {categories.length > 1 ? 'Categories' : 'Category'}
          </dt>
          <dd class="flex flex-1 flex-wrap gap-2">
            {categories.map((cat) => (
              <Badge text={cat} />
            ))}
          </dd>
        </div>
      )
    }
    {
      points !== undefined && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:star" class="size-4" />
            Points
          </dt>
          <dd class="flex-1 text-xs">{points}</dd>
        </div>
      )
    }
    {
      solves !== undefined && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:check-circle" class="size-4" />
            Solves
          </dt>
          <dd class="flex-1 text-xs">{solves}</dd>
        </div>
      )
    }
    {
      files.length > 0 && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:file-text" class="size-4" />
            Files
          </dt>
          <dd class="flex flex-1 flex-wrap gap-2">
            {files.map((file) => (
              <BadgeComponent
                variant="secondary"
                className="flex items-center gap-x-1"
              >
                <Icon name="lucide:file-text" class="size-3" />
                {file}
              </BadgeComponent>
            ))}
          </dd>
        </div>
      )
    }
    {
      remote && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:terminal" class="size-4" />
            Remote
          </dt>
          <dd class="flex-1 text-xs">
            <code class="bg-muted text-foreground relative border px-[0.3rem] py-[0.2rem] text-xs font-medium break-words">
              {remote}
            </code>
          </dd>
        </div>
      )
    }
    {
      flag && (
        <div class="flex flex-wrap items-center gap-x-4 py-2">
          <dt class="text-muted-foreground flex flex-1 items-center gap-x-2 text-xs font-medium">
            <Icon name="lucide:flag" class="size-4" />
            Flag
          </dt>
          <dd class="flex-1 text-xs">
            <code class="bg-muted text-foreground relative cursor-pointer border px-[0.3rem] py-[0.2rem] text-xs font-medium break-all blur-xs transition-all duration-200 select-all hover:blur-none">
              {flag}
            </code>
          </dd>
        </div>
      )
    }
  </dl>
  <section class="fix-margin small">
    <slot />
  </section>
</div>
